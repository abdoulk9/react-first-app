{"version":3,"sources":["components/fruits/FruitList.js","components/fruits/FruitForm.js","base.js","components/fruits/FruitApp.js","serviceWorker.js","index.js"],"names":["FruitList","props","fruitData","list","removeItem","fruitArray","map","item","index","react_default","a","createElement","onClick","FruitForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","event","preventDefault","newFruit","refs","fruitInput","value","trim","addItem","type","ref","placeholder","React","Component","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","base","Rebase","createClass","database","FruitApp","state","deleteFruit","addFruit","syncState","context","length","fruits","getData","splice","setState","fruitName","push","sort","fruits_FruitForm","fruits_FruitList","Boolean","window","location","hostname","match","ReactDOM","render","fruits_FruitApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LA6BeA,MAzBf,SAAmBC,GACf,IAAIC,EAAYD,EAAME,KAElBC,EAAaH,EAAMG,WAGnBC,EAAaH,EAAUI,IACvB,SAACC,EAAMC,GACL,OAAOC,EAAAC,EAAAC,cAAA,UACCJ,EACAE,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAKR,EAAWI,KAAjC,cASd,OACIC,EAAAC,EAAAC,cAAA,UAAKN,ICaEQ,cA9Bb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAFCA,wEAKVU,GACPA,EAAMC,iBACN,IAAIC,EAAWT,KAAKU,KAAKC,WAAWC,MAAMC,OAGtCJ,IACFT,KAAKhB,MAAM8B,QAAQL,GACnBT,KAAKU,KAAKC,WAAWC,MAAQ,qCAM/B,OACEpB,EAAAC,EAAAC,cAAA,QAAMU,SAAUJ,KAAKI,UACnBZ,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OACVC,IAAI,aACJC,YAAY,kBACdzB,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,UAAb,mBAzBgBG,IAAMC,6CCStBC,EAAMC,IAASC,cAVP,CACZC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,iBAQNC,EAHFC,IAAOC,YAAYX,EAAIY,YCkDvBC,cAtDX,SAAAA,IAAc,IAAApC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACVpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,QACKkC,MAAQ,CACTjD,UAAW,CAAC,SAAU,SAAU,YAGpCY,EAAKsC,YAActC,EAAKsC,YAAY9B,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKuC,SAAWvC,EAAKuC,SAAS/B,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAPNA,oFAYVgC,EAAKQ,UAAU,IAAK,CAChBC,QAAStC,KACTkC,MAAO,gDAKX,OAAKlC,KAAKkC,MAAMjD,UAAUsD,OAGfvC,KAAKkC,MAAMjD,UAFX,uCAMHM,GACR,IAAIiD,EAASxC,KAAKyC,UAClBD,EAAOE,OAAOnD,EAAO,GACrBS,KAAK2C,SAAS,CAAE1D,UAAWuD,qCAItBI,GACL,IAAIJ,EAASxC,KAAKyC,UAClBD,EAAOK,KAAKD,GACZJ,EAAOM,OACP9C,KAAK2C,SAAS,CAAE1D,UAAWuD,qCAI3B,OAAQhD,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAWjC,QAASd,KAAKoC,WACzB5C,EAAAC,EAAAC,cAACsD,EAAD,CAAW9D,KAAMc,KAAKyC,UAElBtD,WAAYa,KAAKmC,sBAlDVjB,IAAMC,WCKT8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAAeC,SAASC,eAAe,SDwHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.28532da5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction FruitList(props){\r\n    let fruitData = props.list;\r\n    //appele de la function remove de FruitApp\r\n    let removeItem = props.removeItem;\r\n   \r\n\r\n    let fruitArray = fruitData.map(\r\n        (item, index) => {\r\n          return(<li>\r\n                 {item}\r\n                  <button onClick={() =>removeItem(index)}>\r\n                   Delete {/*  //On applique un binding */}\r\n                   </button>\r\n                   {/* <button onClick={()=>addItem()}> Add</button> */}\r\n                  </li>\r\n                );\r\n             }\r\n       )\r\n\r\n    return(\r\n        <ul>{fruitArray}</ul>\r\n    );\r\n}\r\n\r\n//On export pour l'ulisation\r\nexport default FruitList;","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass FruitForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    let newFruit = this.refs.fruitInput.value.trim();\r\n\r\n\r\n    if (newFruit) {\r\n      this.props.addItem(newFruit);\r\n      this.refs.fruitInput.value = '';\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input type=\"text\"\r\n          ref=\"fruitInput\"\r\n          placeholder=\"Nouveau fruit\" />\r\n        <button type=\"submit\" >Ajouter</button>\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default FruitForm;","import firebase from 'firebase';\r\nimport Rebase from 're-base';\r\n\r\n\r\nconst  config = {\r\n    apiKey: \"AIzaSyCQaxLh0-IbYnGQILrU39oUFH5ryynPcO4\",\r\n    authDomain: \"web-data-30c94.firebaseapp.com\",\r\n    databaseURL: \"https://web-data-30c94.firebaseio.com\",\r\n    projectId: \"web-data-30c94\",\r\n    storageBucket: \"web-data-30c94.appspot.com\",\r\n    messagingSenderId: \"179054297800\"\r\n  };\r\n\r\n\r\n  const app = firebase.initializeApp(config);\r\n  const base = Rebase.createClass(app.database());\r\n\r\n\r\n  export default base;","import React from 'react';\r\nimport FruitList from './FruitList';\r\nimport FruitForm from './FruitForm';\r\n\r\nimport base from '../../base';\r\n\r\n\r\nclass FruitApp extends React.Component {\r\n\r\n\r\n    //Gestion d'un etat\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fruitData: [\"Pommes\", \"Poires\", \"Tomates\"]\r\n        }\r\n        //on fait du blinding pour accepter l'utilisation de delete dans FruitList\r\n        this.deleteFruit = this.deleteFruit.bind(this);\r\n        this.addFruit = this.addFruit.bind(this);\r\n    }\r\n\r\n     //Etablit la liaison entre l'application et firebase\r\n    componentWillMount() {\r\n        base.syncState('/', {\r\n            context: this,\r\n            state: 'fruitData'\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        if (!this.state.fruitData.length) {\r\n            return [];\r\n        } else {\r\n            return this.state.fruitData;\r\n        }\r\n    }\r\n\r\n    deleteFruit(index) {\r\n        let fruits = this.getData();\r\n        fruits.splice(index, 1);\r\n        this.setState({ fruitData: fruits });\r\n    }\r\n\r\n\r\n    addFruit(fruitName) {\r\n        let fruits = this.getData();\r\n        fruits.push(fruitName);\r\n        fruits.sort();\r\n        this.setState({ fruitData: fruits });\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <h1>Liste des fruits</h1>\r\n            <FruitForm addItem={this.addFruit} />\r\n            <FruitList list={this.getData()}\r\n                //On crÃ©e un attribut pour stocker la fonction de suppression\r\n                removeItem={this.deleteFruit}\r\n            />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default FruitApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport FruitApp from './components/fruits/FruitApp';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<FruitApp  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}